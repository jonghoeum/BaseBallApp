@page "/trophy"

@using BaseBallApp.Data;
@using BaseBallApp.Shared;
@using BaseBallApp.Shared.Models
@inject NavigationManager NavManager
@inject IJSRuntime js
@inject TrophyService _DataService
@inject HttpClient Http

@* <div class="title_area" style="height: 782px;">
    <h3></h3>
</div> *@
<article id="container" class="shop">
<section class="content_block">
	<form action="">
		<fieldset>
			@* <div class="search_area">
				<input type="text" name="search" value="" placeholder="Search">
				<input type="submit" value="검색">
			</div> *@
			@* <p class="category_area">
				<button type="button" class="active">전체</button>
				<button value="GC1" type="button">유니폼</button>
				<button value="GC2" type="button">모자</button>
				<button value="GC3" type="button">의류</button>
				<button value="GC4" type="button">잡화</button>
				<button value="GC5" type="button">기념상품</button>
			</p> *@
		</fieldset>
	</form>
	<div class="prd_list">
			<div style="height:auto; overflow:hidden;"><button type="button" class="btn btn-secondary btn-sm" style="float:right; margin-right:5px;" @onclick="() => isModalVisible = true">등록</button></div>
		<p class="counting">전체 <span>@total</span> </p>
		<ul>
			@if (trophies.Count() > 0)
			{
				@foreach(var trp in trophies)
				{
					var imageUrl = _DataService.GetImageUrl(trp.FILE);
					<li class="goods-card">
						<a href="javascript:void(0);" class="">
							@* <i class="new">NEW</i> *@
							<!-- <i th:case="*" class="best">BEST</i> -->
							<img style="max-height: 80%; max-width: 100%;" src="@imageUrl" alt="17f8771e-a579-4521-bc90-04ad6863a0bd.png">
							<span>@trp.TITLE</span>
						</a>
					</li>
				}
			}
			else
			{
						
			}
			@*<li class="goods-card">
				<a href="https://eaglesshop.co.kr/product/%EC%98%A4%EB%A0%8C%EC%A7%80-%EB%A6%AC%EB%B3%B8-%EB%A8%B8%EB%A6%AC%ED%95%80/363/category/68/display/1/" target="_blank" data-id="697" class="">
					<i class="new">NEW</i>
					<!-- <i th:case="*" class="best">BEST</i> -->
						<img style="max-height: 80%; max-width: 100%;" src="/image/251.png" alt="73269b4a-5163-4c94-83f2-ef6337a8e5e6.png">
					<span>오렌지 리본 머리핀</span>
				</a>
			</li>
			<li class="goods-card">
				<a href="https://eaglesshop.co.kr/product/%EC%88%98%EB%A6%AC-%EC%A7%91%EA%B2%8C-%EB%A8%B8%EB%A6%AC%ED%95%80-2%EC%9E%85/373/category/68/display/1/" target="_blank" data-id="696">
					<i class="new">NEW</i>
					<!-- <i th:case="*" class="best">BEST</i> -->
						<img style="max-height: 80%; max-width: 100%;" src="/image/252.png" alt="724f8afa-8cbb-4ca5-9be0-705941acdd8d.png">
					<span>수리 집게 머리핀 2입</span>
				</a>
			</li>
			<li class="goods-card">
				<a href="https://eaglesshop.co.kr/product/%EC%88%98%EB%A6%AC-%EC%84%B8%EC%8C%8D%EB%91%A5%EC%9D%B4-%EB%A8%B8%EB%A6%AC%ED%95%80-2%EC%9E%85/371/category/65/display/1/" target="_blank" data-id="695">
					<i class="new">NEW</i>
					<!-- <i th:case="*" class="best">BEST</i> -->
						<img style="max-height: 80%; max-width: 100%;" src="/image/253.png" alt="b48265d7-9de0-47c0-882c-013fc3dd7c36.png">
					<span>수리 세쌍둥이 머리핀 2입</span>
				</a>
			</li>
			<li class="goods-card">
				<a href="https://eaglesshop.co.kr/product/%EB%AF%B8%EB%8B%88-%EB%AA%A8%EC%9E%90-%ED%82%A4%EB%A7%81/364/category/67/display/1/" target="_blank" data-id="694">
					<i class="new">NEW</i>
					<!-- <i th:case="*" class="best">BEST</i> -->
						<img style="max-height: 80%; max-width: 100%;" src="/image/254.png" alt="86e796df-b595-4f4e-9aac-4df3fb9dfb07.png">
					<span>미니 모자 키링</span>
				</a>
			</li> *@
		</ul>

		<div>
			<div class="paging_area">

				<div class="paging">

					<!-- <button type="button" th:onclick="|searchTable(0, '${page_length}')|" class="btn_page start" th:disabled="${btn_select == 0}"><span class="blind">맨처음</span></button>  -->
					<button type="button" onclick="searchTable('0', '40')" class="btn_page prev" disabled="disabled"><span class="blind">이전 10</span></button>
					<div class="go_num">
						<a style="pointer-events: none;" onclick="searchTable('0', '40')" class="on">1</a>
					</div>
					<button type="button" class="btn_page next" onclick="searchTable('40', '40')" disabled="disabled">
						<span class="blind">다음 10</span>
					</button>
					<!--
					<button type="button"
						class="btn_page end"
						th:onclick="|searchTable('${(btn_all_length -1) * page_length}', '${page_length}')|"
						th:disabled="${btn_select &gt;= (btn_all_length - 1)}">
						<span class="blind">맨끝</span>
					</button>  -->
				</div>


			</div>
		</div>
		@* <div>
			<input @bind="trophys.TITLE" placeholder="제목" />
			<input @bind="trophys.CONTENT" placeholder="내용" />
			<FileUploader OnFileSelected="HandleFileSelected" />

			<button @onclick="RegisterTrophy">등록</button>
		</div> *@
	</div>
	
</section>
</article>
@if (isModalVisible)
{
	<div class="modal show d-block" tabindex="-1">
		<div class="modal-dialog">
			<div class="modal-content">
				<EditForm Model="trophys" OnValidSubmit="RegisterTrophy">
					<DataAnnotationsValidator />
					<div class="modal-header">
						<h5 class="modal-title">트로피 등록</h5>
						<button type="button" class="btn-close" @onclick="() => isModalVisible = false"></button>
					</div>

					<div class="modal-body">
						<InputText @bind-Value="trophys.TITLE" class="form-control mb-2" placeholder="제목" />
						<ValidationMessage For="@(() => trophys.TITLE)" />

						<InputText @bind-Value="trophys.CONTENT" class="form-control mb-2" placeholder="내용" />
						<ValidationMessage For="@(() => trophys.CONTENT)" />

						<FileUploader OnFileSelected="HandleFileSelected" />
					</div>

					<div class="modal-footer">
						<button class="btn btn-secondary" type="button" @onclick="() => isModalVisible = false">닫기</button>
						<button class="btn btn-primary" type="submit">등록</button>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show"></div>
}
<script>
    // modify location
    $('.left_tab a').each(function () {
        //console.log("aaaaa");
        $(this).attr("href", function (index, old) {
            //return old.replace('/MN/HI/MNHI01.do', '');
        });
    });

    $(window).scroll(function () {
        $('.his_wrap ol .his_group img.pc_only').each(function () {
            var wTop = $(window).scrollTop();
            _thsTop = $(this).offset().top - window.innerHeight;

            if (wTop > _thsTop) {
                $(this).addClass('active')
            }
        });
    });
</script>

@code{
	//private IEnumerable<TrophyClass> Tdata = Enumerable.Empty<TrophyClass>();
	private List<TrophyClass> trophies = new List<TrophyClass>();
	private TrophyClass trophys = new();
	private string path = "";
	private string responseMessage = "";
	private string apiBase = "";
	private bool isModalVisible = false;
	private int total = 0;

	protected override async Task OnInitializedAsync()
	{
		//apiBase = Configuration["ApiBase"]; 
		trophies = await _DataService.GetTrophiesAsync();
		if(trophies.Count() > 0)
		{
			total = trophies.Count();
		}
		//Tdata = await _DataService.GetTrophyData();
	}
	private async Task HandleFileSelected(IBrowserFile selectedFile)
	{
		if (selectedFile != null)
		{
			// 파일 업로드 처리
			path = await UploadFileAsync(selectedFile);
			if (string.IsNullOrEmpty(path))
			{
				responseMessage = "파일 업로드 실패.";
				return;
			}
			trophys.FILENAME = selectedFile.Name; // 원본 파일명
			trophys.FILE = path;
			//trophy.FilePath = filePath;
			//trophy.OriginalFileName = selectedFile.Name; // 원본 파일명
		}
	}

	private async Task RegisterTrophy()
	{
		var success = await _DataService.InsertTrophyAsync(trophys);

        if (success)
        {
            responseMessage = "트로피 등록 성공!";
            trophies = await _DataService.GetTrophiesAsync(); // 목록 갱신
        }
        else
        {
            responseMessage = "등록 실패.";
        }
    }

	private async Task<string> UploadFileAsync(IBrowserFile file)
{
    var content = new MultipartFormDataContent();

    // 10MB까지 허용
    var stream = file.OpenReadStream(10 * 1024 * 1024); // ✅ 10MB 허용
    var fileContent = new StreamContent(stream);
    fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
    content.Add(fileContent, "File", file.Name);

    var response = await Http.PostAsync("api/trophy/upload", content);
    if (response.IsSuccessStatusCode)
    {
        return await response.Content.ReadAsStringAsync();  // 서버에서 반환된 파일 경로
    }

    return null;
}
    private async Task PageMove(string page)
    {
        NavManager.NavigateTo(page);
    }

}